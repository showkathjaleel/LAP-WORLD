<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Add Product - Dashboard HTML Template</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,700" />
  <!-- https://fonts.google.com/specimen/Roboto -->
  <link rel="stylesheet" href="/css/fontawesome.min.css" />
  <!-- https://fontawesome.com/ -->
  <link rel="stylesheet" href="jquery-ui-datepicker/jquery-ui.min.css" type="text/css" />
  <!-- http://api.jqueryui.com/datepicker/ -->
  <!-- https://getbootstrap.com/ -->
  <link rel="stylesheet" href="/css/templatemo-style.css">

  <!--
	Product Admin CSS Template
	https://templatemo.com/tm-524-product-admin
	-->
</head>





<style>
.form-group label{
  color: black !important;
}
.form-control{
  background-color: white;
}
</style>
<style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 350px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<body>




   <main style="background-color: white" > 



    <div class="container tm-mt-big tm-mb-big">
      <div class="col">

      <div class="col-xl-9 col-lg-10 col-md-12 col-sm-12 mx-auto">

        <div class="bg-light tm-block tm-block-h-auto">  
          {{!-- // style="background-color: white"// --}}

          <div class="row">
            <div class="col-12">
              <h2 class="d-inline-block text-dark">Add Product</h2>
            </div>
          </div>



          <div>
            <div>
              <form action="/admin/add-products"  method="post"
                onsubmit="return validation()" enctype="multipart/form-data" >


                <div class="form-group mb-3">
                  <label for="name">Product Name</label>
                  <input id="Name" name="laptops" type="text" class="form-control validate" required
                    onkeyup="validateProductName()" />
                  <span id="name" class="text-danger"></span>
                </div>


                <div class="form-group mb-3">
                  <label for="name">Price </label>
                  <input id="price" name="Price" type="text" class="form-control" required
                    onkeyup="validPrice()" />
                  <span id="Price" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                  <labelfor="name">Offers </label>
                    <input id="offers" name="Offers" type="text" class="form-control validate" />
                    <span id="Offers" class="text-danger"></span>
                </div>


                <div class="form-group mb-3">
                  <label for="description">Description</label>
                  <textarea class="form-control " rows="3" name="description" id="Discription" required
                    ></textarea>
                  <span id="productdescription" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                  <label for="description">Specifications</label>
                  <textarea class="form-control " rows="3" name="Specs" required id="specs"></textarea>
                  <span id="Specifications" class="text-danger"></span>

                </div>

                <div class="form-group mb-3">
                  <label for="category">Category</label>



                  <select name="brandname" class="form-control" id="">
                    {{#each cat}}
                    <option value="{{this._id}}">{{this.brandname}}</option>
                    {{/each}}
                  </select>

                  <div class="form-group mb-3">
                    
                    <div class="form-group mb-3">
                      <label for="category">Color</label>

                      <input list="ShowDataList1" class="form-control" placeholder="Search / Select" id="color"
                        name="color" onkeyup="validCategory()">
                      <span id="Color" class="text-danger"></span>

                      <datalist id="ShowDataList1">                  
                        <option value="white">
                        <option value="silver">                   
                        <option value="black">
                      </datalist>
                    </div>

                    <div class="row">

                      <div class="form-group mb-3 col-xs-12 col-sm-6">
                        <label for="stock">Stock </label>
                        <input id="stock" name="stock" type="text" class="form-control validate" required
                          onkeyup="validStock()" />
                        <span id="Stock" class="text-danger"></span>
                      </div>
                    </div>
                   <div class="form-outline mb-4">
          
            <label class="form-label" for="id_image">Image</label>
            <span id="croppedImages"></span>
            <input type="file" class="form-control" id="id_image" name="image" data-toggle="modal"
                data-target="#exampleModal" accept="image/*" multiple>
        </div>
                  </div>

                  <div class="col-12">
                    <button type="submit" class="btn btn-primary btn-block text-uppercase">Add Product Now</button>
                    </div>
                  </div>
              </form>
            
          </div>
        </div>
      </div>
    </div>
    
  </main>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group row" id="test">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

{{!-- --------------------------------------------------------CROP LINK---------------------------------------------------------------------------- --}}
<script defer src="https://cdn.crop.guide/loader/l.js?c=LJWGWC"></script>
{{!-- --------------------------------------------------------CROP LINK---------------------------------------------------------------------------- --}}
  <script>
    var errorName = document.getElementById('name')
    var errordescription = document.getElementById('productdescription')
    var errorCategory = document.getElementById('category')
    var errorColor = document.getElementById('Color')
    var errorPrice = document.getElementById('Price')
    var errorStock = document.getElementById('Stock')
    var errorSpec = document.getElementById('Specifications')
    var errorOffers = document.getElementById('Offers')
    function validateProductName() {
      const name = document.getElementById('Name').value;
      if (name == "") {
        errorName.innerHTML = 'Enter product name'
        return false
      }
      if (!name.match(/^[a-zA-Z0-9 ]*$/)) {
        errorName.innerHTML = 'Enter valid Product name'
        return false
      }
      if (name.match(/^[ ]*$/)) {
        errorName.innerHTML = 'Enter product name'
        return false
      }
      errorName.innerHTML = null
      return true
    }

    {{!-- function validateProductDescription() {
      const name = document.getElementById('Discription').value;
      if (name == "") {
        errordescription.innerHTML = 'Enter description'
        return false
      }
      if (!name.match(/^[a-zA-Z ]*$/)) {
        errordescription.innerHTML = 'Enter valid description'
        return false
      }
      if (name.match(/^[ ]*$/)) {
        errordescription.innerHTML = 'Enter valid description'
        return false
      } if (name.length < 10) {

        errordescription.innerHTML = "enter valid description "
        return false
      }
      errordescription.innerHTML = null
      return true
    }
    function validCategory() {
      const category = document.getElementById('Category').value
      if (category == "") {
        errorCategory.innerHTML = "Enter category"
        return false
      }
      errorCategory.innerHTML = null
      return true
    } --}}

    function validOffers() {
      const offers = document.getElementById('offers').value
      if (offers == "") {
        errorOffers.innerHTML = "Enter offers"
        return false
      }
      errorOffers.innerHTML = null
      return true
    }
    function validColor() {
      const color = document.getElementById('color').value
      if (color == "") {
        errorColor.innerHTML = "Enter color"
        return false
      }
      if (!color.match(/^[a-zA-Z ]*$/)) {
        errorColor.innerHTML = "Enter valid color"
        return false
      }
      errorColor.innerHTML = null
      return true
    }
    function validPrice() {
      const price = document.getElementById('price').value
      if (price == "") {
        errorPrice.innerHTML = "Enter the price"
        return false
      }
      errorPrice.innerHTML = null
      return true
    }
    function validStock() {
      const stock = document.getElementById('stock').value
      if (stock == "") {
        errorStock.innerHTML = "Enter the stock"
        return false
      }
      errorStock.innerHTML = null
      return true
    }

    function validateSpecs() {
      const name = document.getElementById('specs').value;
      if (name == "") {
        errorSpec.innerHTML = 'Enter specifications'
        return false
      }
      if (!name.match(/^[a-zA-Z0-9 ]*$/)) {
        errorSpec.innerHTML = 'Enter valid specifications'
        return false
      }
      if (name.match(/^[ ]*$/)) {
        errorSpec.innerHTML = 'Enter valid specifications'
        return false
      }
      errorSpec.innerHTML = null
      return true
    }


    function validation() {
      if (!validateProductName() || !validateProductDescription() || !validCategory() || !validColor() || !validPrice() || !validStock() || !validateSpecs() || !validOffers()) {
        return false
      }
      return true
    }
  </script>

  <script src="/assets2/js/main.js"></script>

</body>

</html> 



<script>
    const input = document.getElementById('id_image')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = []
       // const imagebox = []
       // const crop_btn = []
       // const confirm_btn = []
        const url = []
        const length= input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }
        
        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url,i)=>{
            document.getElementById('image-box'+i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })
        
        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable
  

        // Displaying the image box
        for(i=0;i<length;i++){
            document.getElementById('image-box'+i).style.display= 'block'
             document.getElementById('crop-btn'+i).style.display= 'block'
        }
       

        for(i=0;i<length;i++){
            cropper(img_data[i],document.getElementById('image'+i),i,document.getElementById('crop-btn'+i),document.getElementById('image-box'+i))
        }

        

        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container

                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files

                    // Replace the original image file with the new cropped image file
                  // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>















